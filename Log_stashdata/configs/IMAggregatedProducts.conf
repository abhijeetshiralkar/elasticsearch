
input {
  jdbc {
     jdbc_driver_library => "${DATABASE_DRIVER_PATH}\sqljdbc42.jar"
     jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
     jdbc_connection_string => "jdbc:sqlserver://${DATABASE_HOST}:${DATABASE_PORT};databasename=${DATABASE}"
     jdbc_user => "${DATABASE_USERNAME}"
     jdbc_password => "${DATABASE_PASSWORD}"
     statement_filepath => "${LOGSTASH_SQL_FILEPATH}\aggregatedProducts.sql"
  }
}

filter {
	mutate {     
		split => { "resellersid" => ","}
	    split => { "purchaseresellersid" => ","}
	}
	aggregate {
		task_id => "%{x_rec_spec}"
		code => "
			map['x_rec_spec'] = event.get('x_rec_spec')
			map['aggregatedProducts'] ||= []
			map['aggregatedProducts'] << {'mfrmaterialkey' => event.get('mfrmaterialkey'),'x_rec_spec' => event.get('aggregated_x_rec_spec'), 'material' => event.get('material'), 'globalmaterial' => event.get('globalmaterial'), 'manufacturerpartnumber' => event.get('manufacturerpartnumber'), 'vendorname' => event.get('vendorname'), 'salesorganization' => event.get('salesorganization'), 'longdesc1' => event.get('longdesc1'), 'mediumdesc' => event.get('mediumdesc'), 'cat1desc' => event.get('cat1desc'), 'cat2desc' => event.get('cat2desc'), 'cat3desc' => event.get('cat3desc'), 'imagelow' => event.get('imagelow'), 'imagemid'  => event.get('imagemid'), 'imagehigh' => event.get('imagehigh'), 'resellersid' => event.get('resellersid'), 'purchaseresellersid' => event.get('purchaseresellersid')}
		"
		push_previous_map_as_event => true
		timeout => 150000
		timeout_tags => ['aggregated']
	}
	if "aggregated" not in [tags] {
		drop {}
	}
}
  
output {
    elasticsearch {
        action => "update"
        #hosts => "https://f6e4407d7c584f3ae715de903270e6b6.us-east-1.aws.found.io:443"
		hosts => ["${ELASTICSEARCH_HOST}"]
		user => "${ELASTICSEARCH_USER}"
        password => "${ELASTICSEARCH_PASSWORD}"
        #index => "imwebmx-%{+YYYY.MM.dd}"
		index => "${IMPRODUCT_INDEX_NAME}"		
        doc_as_upsert => true
        document_type => "product"
        document_id => "%{x_rec_spec}"
        flush_size => 500
		retry_on_conflict => 50
    }
    #stdout { codec => rubydebug }
	stdout { codec => dots }
}
